openapi: 3.0.3
info:
  version: '3.0'
  title: Fyle REST API
  contact:
    name: Integrations
    email: support@fyle.in
servers:
  - url: 'https://accounts.fylehq.com'
    description: Live Server
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.fylehq.com/app/developers/#/oauth/authorize'
          tokenUrl: 'https://accounts.fylehq.com/oauth/token'
          scopes:
            admin.*: Grant all ADMIN actions
  parameters:
    offset:
      in: query
      name: offest
      description: |
        offset is used to skip that many number of objects before counting. <br>
      schema:
        type: integer
        example: 10
    limit:
      in: query
      name: limit
      description: >
        A limit on the number of objects to be returned. Allowed values are from
        1 to 200.
      schema:
        type: integer
        example: 100
        default: 200
    created_at:
      in: query
      name: created_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        created_at=gte.2020-06-01T00:00:00.000Z filters all employees created on
        or after 1st Jun 2020.<br>

        created_at=gte.2020-06-01T00:00:00.000Z&created_at=lt.2020-07-01T00:00:00.000Z
        filters all employees `created` in the month of Jun 2020.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    updated_at:
      in: query
      name: updated_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z filters all employees updated on
        or after 1st Jun 2020.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z&updated_at=lt.2020-07-01T00:00:00.000Z
        filters all employees `updated` in the month of Jun 2020.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    org_id:
      in: query
      name: org_id
      description: |
        This param is used to filter records based org id.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.orvneouegi
    employee_email:
      in: query
      name: employee_email
      description: |
        This param is used to filer records based employee email.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.employee1@example.com
    name:
      in: query
      name: name
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        name=in.(value1,value2)
      schema:
        type: string
        example: like.Add*
    type:
      in: query
      name: type
      description: |
        Supported operators are `eq`, `in`.<br>
      schema:
        type: string
        example: eq.SELECT
    options:
      in: query
      name: options
      description: |
        List of strings.<br>
        Supported operators are `eq`,`cs`.<br>
      schema:
        type: string
        example: 'cs.{food,travel}'
    mandatory:
      in: query
      name: mandatory
      description: |
        This param is used to filer records by
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.true
    org_category_ids:
      in: query
      name: org_category_ids
      description: |
        List of strings.<br>
        Supported operators are `eq`,`cs`.<br>
      schema:
        type: string
        example: 'cs.{12,7}'
    enabled:
      in: query
      name: enabled
      description: |
        This param is used to filer records by
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.true
    id:
      in: query
      name: id
      schema:
        type: string
      description: >-
        Filters the objects by id. For single value use `id=eq.<value>`. For
        multiple values, use `id=in.(value1,value2,value3)`.
      example: eq.<id>
    currency:
      in: query
      name: currency
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        currency=in.(value1,value2)
      schema:
        type: string
        example: 'in.(USD,INR)'
    amount:
      in: query
      name: amount
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
        amount=in.(value1,value2)
      schema:
        type: string
        example: eq.100
    approved_at:
      in: query
      name: approved_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        approved_at=gte.2020-06-01T00:00:00.000Z filters all objects created on
        or after 1st Jun 2020.<br>

        approved_at=gte.2020-06-01T00:00:00.000Z&approved_at=lt.2020-07-01T00:00:00.000Z
        filters all objects `created` in the month of Jun 2020.<br>
      schema:
        type: string
        example: 'gte.2020-06-05T00:00:00.000Z'
    state:
      in: query
      name: state
      description: |
        Possible values : DRAFT, APPROVAL_PENDING, APPROVED, REJECTED, PAID.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(APPROVED)
    advance_id:
      in: query
      name: advance_id
      schema:
        type: string
      description: >
        Filters the objects by advance_id. For single value use
        `advance_id=eq.<value>`.

        For mulitple values, use `advance_id=in.(value1,value2,value3)`. <br>

        Supported operators: `in`, `eq`, `not.in`, `not.eq`
      example: eq.advZP7QXFbHH4
    advance_request_number:
      in: query
      name: advance_request_number
      schema:
        type: string
      description: >
        Filters the objects by advance_request_number. For single value use
        `advance_request_number=eq.<value>`.

        For mulitple values, use
        `advance_request_number=in.(value1,value2,value3)`. <br>

        Supported operators: `in`, `eq`, `not.in`, `not.eq`
      example: eq.AR/2019/03/R/2
    trip_request_id:
      in: query
      name: trip_request_id
      schema:
        type: string
      description: >
        Filters the objects by trip_request_id. For single value use
        `trip_request_id=eq.<value>`.

        For mulitple values, use `trip_request_id=in.(value1,value2,value3)`.
        <br>

        Supported operators: `in`, `eq`, `not.in`, `not.eq`
      example: eq.trObdH5YgKzL
    is_sent_back:
      in: query
      name: is_sent_back
      description: |
        This param is used to filer records by
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.true
    is_pulled_back:
      in: query
      name: is_pulled_back
      description: |
        This param is used to filer records by
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.true
    policy_amount:
      in: query
      name: policy_amount
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
        policy_amount=in.(value1,value2)
      schema:
        type: string
        example: eq.100
    policy_state:
      in: query
      name: policy_state
      description: |
        Possible values : SUCCESS, FAILED.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(SUCCESS)
    policy_flag:
      in: query
      name: policy_flag
      description: |
        This param is used to filer records by
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.true
    employee_id:
      in: query
      name: employee_id
      description: |
        This param is used to filer records based employee id.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    employee_code:
      in: query
      name: employee->employee_code
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.DFS552KK
    project_id:
      in: query
      name: project_id
      schema:
        type: string
      description: >-
        Filters the objects by project_id. For single value use
        `project_id=eq.<value>`. For multiple values, use
        `project_id=in.(value1,value2,value3)`.
      example: eq.2341
    exported:
      in: query
      name: export_info->exported
      description: |
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.false
    exported_at:
      in: query
      name: export_info->exported_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    export_ids:
      in: query
      name: export_info->export_ids
      description: |
        Supported operators are `eq`,`cs`.<br>
      schema:
        type: string
        example: 'cs.{expD3QWBgoZ2U,expf9H3sh1B}'
    employee_user_id:
      in: query
      name: employee->user_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.usIfhs65KvvF
    settlement_id:
      in: query
      name: settlement_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.setRd8Dw5hD
    payment_id:
      in: query
      name: payment_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.pay3hGs8ne
    reimbursements_state:
      in: query
      name: state
      description: |
        Possible values : COMPLETE, PENDING.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(COMPLETE)
    purpose:
      in: query
      name: purpose
      description: |
        Supported operators are `eq`, `like`.<br>
      schema:
        type: string
        example: like.(trip*)
    unique_id:
      in: query
      name: unique_id
      description: |
        Sample values :  `P/2020/06/R/205`.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: eq.P/2020/06/R/205
    accounting_exported:
      in: query
      name: accounting_exported
      description: |
        Possible values : true, false.<br>
        Supported operators are `eq`, `in`.<br>
      schema:
        type: string
        example: accounting_exported=eq.true
    mode:
      in: query
      name: mode
      description: |
        Possible values : ACH, OFFLINE.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(ACH)
    ach_state:
      in: query
      name: ach_state
      description: >
        Possible values : ACH_INITIATED, ACH_COMPLETE, ACH_FAILED,
        ACH_RETRY.<br>

        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(ACH_COMPLETE)
    foreign_currency:
      in: query
      name: original_currency
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: 'in.(USD,INR)'
    foreign_amount:
      in: query
      name: original_amount
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
      schema:
        type: string
        example: eq.100
    payment_mode:
      in: query
      name: payment_mode
      description: |
        Supported operators for filtering are : `eq`.
      schema:
        type: string
        example: eq.BANK_TRANSFER
    collector_id:
      in: query
      name: collector_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    returnee_id:
      in: query
      name: returnee_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    opening_dt:
      in: query
      name: opening_dt
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    closing_dt:
      in: query
      name: closing_dt
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    total_opening_balance:
      in: query
      name: total_opening_balance
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
        total_opening_balance=in.(value1,value2)
      schema:
        type: string
        example: eq.100
    total_closing_balance:
      in: query
      name: total_closing_balance
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
        total_closing_balance=in.(value1,value2)
      schema:
        type: string
        example: eq.100
    issued_at:
      in: query
      name: issued_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    issuer_id:
      in: query
      name: issuer_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    source_account:
      in: query
      name: source_account
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.Personal Account
    sub_project:
      in: query
      name: sub_project
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        sub_project=in.(value1,value2)
      schema:
        type: string
        example: like.Formula*
    display_name:
      in: query
      name: display_name
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        display_name=in.(value1,value2)
      schema:
        type: string
        example: like.Fast*
    code:
      in: query
      name: code
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        code=in.(value1,value2)
      schema:
        type: string
        example: like.high*
    category_ids:
      in: query
      name: category_ids
      description: |
        List of strings.<br>
        Supported operators are `eq`,`cs`.<br>
      schema:
        type: string
        example: 'cs.{89234,2341}'
    primary_approver_id:
      in: query
      name: primary_approver_id
      schema:
        type: string
      description: >-
        Filters the objects by primary_approver_id. For single value use
        `primary_approver_id=eq.<value>`. For multiple values, use
        `primary_approver_id=in.(value1,value2,value3)`.
      example: eq.ouX2Rv617cW0
    secondary_approver_id:
      in: query
      name: secondary_approver_id
      schema:
        type: string
      description: >-
        Filters the objects by secondary_approver_id. For single value use
        `secondary_approver_id=eq.<value>`. For multiple values, use
        `secondary_approver_id=in.(value1,value2,value3)`.
      example: eq.ouFOpg9CGLZ5
    cost_centers_name:
      in: query
      name: name
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        name=in.(value1,value2)
      schema:
        type: string
        example: like.ABCD*
    cost_centers_id:
      in: query
      name: id
      description: |
        This param is used to filter cost center record based on cost center id.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.7
    cost_centers_code:
      in: query
      name: code
      description: |
        Supported operators are `in`,`eq`,`like`.<br>
      schema:
        type: string
        example: eq.CC01
  schemas:
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: >
            This error means that the input access token is either not issued by
            Fyle or has expired.

            You need to generate a new access token.
    '403':
      type: object
      properties:
        message:
          enum:
            - Forbidden
          type: string
          description: >
            This error means current user does not have enough permissions to
            perform this operation.
    count:
      description: |
        The total number of objects that can be requested.
      type: integer
      example: 10000
    offset:
      description: >
        offset is used to skip that many number of objects before counting. <br>

        For example, if there are 2000 objects, <br>

        The first request will have offset as 0 and limit as 1000 to return
        first 1000 objects. <br>

        The second request will have offset as 1000 and limit as 1000 to return
        next 1000 objects. <br>
      type: integer
      example: 10
      default: 200
    limit:
      description: |
        The actual number of objects that are returned in the response.
      type: integer
      example: 100
    level:
      type: object
      readOnly: true
      properties:
        name:
          type: string
          description: |
            Level name of the employees
          example: Associate I
        band:
          type: string
          description: >
            Band in which this level belongs to, you can group mulitple levels
            into a single band.
          example: Associate
        rank:
          type: integer
          description: >
            Rank in which this level belongs to. We recommend to assign higher
            rank for senior people in the org trees and

            lower rank for employees in leaf of org tree.
          example: 1
    department:
      type: object
      readOnly: true
      properties:
        name:
          type: string
          example: Sales
        subDepartment:
          type: string
          example: Outbound Sales
    user:
      type: object
      readOnly: true
      properties:
        email:
          type: string
          format: email
          maxLength: 127
          description: >
            An immutable field that represents the email address of the
            Employee.

            Must be compliant with <a
            href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
          example: john.doe@example.com
        full_name:
          type: string
          maxLength: 255
          description: >
            Represents the full name of the Employee. Must be at least 3
            characters.
          example: John Doe
    cost_center:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          example: '11539'
        name:
          type: string
          maxLength: 255
          example: sales & marketing
        code:
          type: string
          example: sm-cc
    perdiem:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          example: '1104'
        name:
          type: string
          maxLength: 255
          example: sales & marketing
        currency:
          type: string
          maxLength: 3
          example: USD
        rate:
          type: integer
          example: 40
    location:
      type: object
      properties:
        city:
          type: string
          example: London
        state:
          type: string
          example: London
        display_name:
          type: string
        country:
          type: string
          example: United Kingdom
        formatted_address:
          type: string
          example: '221 Baker St, Marylebone, London, United Kingdom'
        latitude:
          type: number
          example: 12.971599
        longitude:
          type: number
          example: 77.594566
    custom_properties:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: boolean
          - type: integer
          - $ref: '#/components/schemas/location'
          - type: array
            items:
              type: string
        description: >
          The value for the custom properties. This could be a String, Boolean,
          Integer or an Array of Strings. <br>
      example:
        house: gryffindor
    dwolla_cutomers_metadata:
      type: object
      readOnly: true
      properties:
        customerMetadataId:
          type: string
          readOnly: true
        customerId:
          type: string
          readOnly: true
        bankAccountAdded:
          type: boolean
          readOnly: true
          description: |
            Flag which indicates whether bank account was added or not.
          default: false
          example: true
    annual_mileage:
      type: object
      properties:
        twoWheeler:
          type: number
          example: 0
        fourWheeler:
          type: number
          example: 0
        fourWheeler1:
          type: number
          example: 0
        fourWheeler3:
          type: number
          example: 0
        fourWheeler4:
          type: number
          example: 0
        bicycle:
          type: number
          example: 0
        electricCar:
          type: number
          example: 0
    employees:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: >
            This id prodvided by Fyle to identify a employee from this
            organisation.

            This id is always prefixed with `ou`.

            This id is unique per organisation per email.
          readOnly: true
          example: ouHXboARkbAB
        user_id:
          type: string
          maxLength: 255
          description: |
            This id helps to identify employees in other organisations.
            It is always prefixed with the string `us`.
            It is unique per email.
          example: usIYTLwzlaGu
        email:
          type: string
          format: email
          maxLength: 127
          example: john.doe@example.com
          description: >
            An immutable field that represents the email address of the
            employee.

            Must be compliant with <a
            href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
        employee_code:
          type: string
          maxLength: 255
          example: E84122
          description: >
            This field refers to any string that the client programs can use to
            refer to an employee's unique id.

            This could be any field such as an UUID from an Active Directory
            server or employee id in a HRMS system.

            This field shall be ignored in POST requests.
        full_name:
          type: string
          maxLength: 255
          example: John Doe
          description: >-
            Represents the full name of the employee. Must be at least 3
            characters.
        created_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when this employees entry was created.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T13:14:54.804Z'
        updated_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when this employees entry was updated.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-11T13:14:55.201598Z'
        email_verified_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when this email was verified in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        onboarded:
          type: boolean
          description: >
            This flag indicates whether an employee has completed the onboarding
            flow or not.
          example: true
        joining_date:
          type: string
          format: date
          example: '2018-10-31'
          description: Date string in YYYY-MM-DD format
        location:
          type: string
          maxLength: 255
          example: Bangalore Ofc
        level_id:
          type: string
          maxLength: 255
          example: lvlnvJUe9k6Vx
        level:
          $ref: '#/components/schemas/level'
        business_unit:
          type: string
          maxLength: 255
          example: Finance ops
        department_id:
          type: string
          maxLength: 255
          example: dept9in4oIHpdR
        department:
          $ref: '#/components/schemas/department'
        title:
          type: string
          maxLength: 255
          example: Branch Manager
        mobile:
          type: string
          description: >
            Mobile number of the employee.

            `Given example is a fake number. We don't know who might answer your
            call.`
          example: +1-202-555-0167
        mobile_verified:
          type: boolean
          description: ''
          default: false
          example: false
        mobile_verified_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when the employee has verified his/her mobile number in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        roles:
          type: array
          readOnly: true
          description: >
            These are roles assigned to an employee, Most roles are assigned by
            Admin.

            Few roles like HOP, HOD, APPROVER are assigned by FYLE.
          items:
            type: string
            enum:
              - FYLER
              - APPROVER
              - TRAVEL_ADMIN
              - VERIFIER
              - PAYMENT_PROCESSOR
              - FINANCE
              - ADMIN
              - TRAVEL_AGENT
              - OWNER
              - AUDITOR
              - HOD
              - HOP
          example:
            - FYLER
            - APPROVER
        branch_ifsc:
          type: string
          maxLength: 11
          description: >
            IFSC code of the bank account of the employee.

            Must be a 11 digit alphanumeric code. `branch_ifsc` is India
            specific.
          example: SBIN0116569
        bank_name:
          type: string
          readOnly: true
          example: Example bank
        branch_account:
          type: string
          maxLength: 63
          description: >
            The account number of the bank account of the employee.
            `branch_account` is India specific.
          example: XWWEW000024324493
        org_id:
          type: string
          description: |
            The unique id of the Organization to which the employee belongs.
            This field shall be ignored in POST requests.
          example: orwruogwnngg
        org_name:
          type: string
          description: |
            The Name of the Organization to which the employee belongs.
            This field shall be ignored in POST requests.
          example: Ministry of Magic
        primary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: >
            Primary approver who will be added as an approver by default for all
            the submitted reports and expenses.
          example:
            full_name: primary approver
            email: primary_approver@example.com
        primary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the primary approver.
          example: ou4b24ugv3vg
        secondary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            A secondary approver who can be added to reports via policies.
          example:
            full_name: secondary approver
            email: secondary_approver@example.com
        secondary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the secondary approver.
          example: ourjgeugv3vg
        tertiary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            A tertiary approver who can be added to reports via policies.
          example:
            full_name: tertiary approver
            email: tertiary_approver@example.com
        tertiary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the tertiary approver.
          example: oueuroefkver
        delegatee:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            An employee who will be able to login on-behalf-of this employee.
          example:
            full_name: delegatee
            email: delegatee@example.com
        delegatee_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the delegatee.
          example: ouvebjeasfj
        delegation_end_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Show when the employee has verified his/her mobile number in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        delegation_start_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when the employee was verified his/her mobile number in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        mileage_rate_labels:
          type: array
          description: |
            The list of mileage labels that are applicable for this employee.
          items:
            type: string
            enum:
              - TWO_WHEELER
              - FOUR_WHEELER
              - FOUR_WHEELER1
              - FOUR_WHEELER3
              - FOUR_WHEELER4
              - BICYCLE
              - ELECTRIC_CAR
          example:
            - TWO_WHEELER
            - FOUR_WHEELER
        cost_centers:
          type: array
          description: |
            This list of cost centers that are applicable for this employee.
          items:
            $ref: '#/components/schemas/cost_center'
        per_diem_rates:
          type: array
          description: This list of per diem rates that are applicable for this employee.
          items:
            $ref: '#/components/schemas/perdiem'
        custom_properties:
          $ref: '#/components/schemas/custom_properties'
        disabled:
          type: boolean
          description: >
            Indicates whether an employee is disabled or not in Fyle.

            During POST call, If set to `TRUE`, an active employee account will
            be disabled.

            Setting to `FALSE` will NOT enable a disabled employee.

            This can only be accomplished from the web-app.
          default: false
        special_email:
          type: string
          format: email
          description: >
            This is an auto-generated email to which an employee can forward a
            receipt from any of their email inboxes.

            A corresponding expense will be created in their Fyle app.
          example: receipts+john_doe_ejtj@fyle.ai
        dwolla_customers_metadata:
          $ref: '#/components/schemas/dwolla_cutomers_metadata'
        annual_mileage_of_user_before_joining_fyle:
          $ref: '#/components/schemas/annual_mileage'
        status:
          type: string
          enum:
            - PENDING_DETAILS
            - ACTIVE
            - DISABLED
          example: ACTIVE
        is_primary:
          type: boolean
          description: >
            This flag indicates whether this is primary account of this employee
            or not.
          readOnly: true
          example: true
    get_employees:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/employees
        data:
          type: array
          items:
            $ref: '#/components/schemas/employees'
    requests_employees:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/employees'
        test:
          type: boolean
          example: false
          default: false
      required:
        - data
    post_employees:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 127
          description: >
            An immutable field that represents the email address of the
            Employee.

            Must be compliant with <a
            href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
          example: john.doe@example.com
        id:
          type: string
          maxLength: 255
          description: >
            This id prodvided by Fyle to identify a employee from this
            organisation.

            This id is always prefixed with `ou`.

            This id is unique per organisation per email.
          example: ouHXboARkbAB
    bulk_error:
      type: object
      properties:
        row:
          type: integer
          description: |
            This holds the info of which row contains bad data.
        key:
          type: string
          description: |
            This helps in identifying the error by unique key.
        message:
          type: string
          description: |
            This explains what the error is in `human readable` text.
    json_parsing_error:
      type: object
      properties:
        message:
          enum:
            - Unable to process JSON
          type: string
          description: |
            This error means that incoming json is not in right format.
        code:
          type: integer
          default: 400
          example: 400
          deprecated: true
    employee_id:
      type: string
      maxLength: 255
      description: >
        This id prodvided by Fyle to uniquely identify an employee within an
        organization.

        This id is always prefixed with `ou`.
      readOnly: true
      example: outGt9ju6qP
    minimals_employees:
      type: object
      description: Details of the employee to whom this object belongs to.
      readOnly: true
      properties:
        user_id:
          type: string
          maxLength: 255
          description: |
            This id helps to identify employees in other organisations.
            It is always prefixed with the string `us`.
            It is unique per email.
          example: usIYTLwzlaGu
        employee_code:
          type: string
          maxLength: 255
          example: E84122
          description: >
            This field refers to any string that the client programs can use to
            refer to an employee's unique id.

            This could be any field such as an UUID from an Active Directory
            server or employee id in a HRMS system.
        location:
          type: string
          maxLength: 255
          example: Bangalore Ofc
        level_id:
          type: string
          maxLength: 255
          example: lvlnvJUe9k6Vx
        department_id:
          type: string
          maxLength: 255
          example: dept9in4oIHpdR
        business_unit:
          type: string
          maxLength: 255
          example: Finance ops
          description: >-
            Represents the business unit of the organization to which of the
            employee belongs.
        title:
          type: string
          maxLength: 255
          example: Branch Manager
          description: Represents the title/desgination of the employee.
        mobile:
          type: string
          description: >
            Mobile number of the employee.

            `Given example is a fake number. We don't know who might answer your
            call.`
          example: +1-202-555-0167
        joining_dt:
          type: string
          format: date
          example: '2018-10-31'
          description: Date string in YYYY-MM-DD format
        full_name:
          type: string
          maxLength: 255
          example: John Doe
          description: >-
            Represents the full name of the employee. Must be at least 3
            characters.
    project:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        display_name:
          type: string
          maxLength: 513
          description: >
            This is a combination of name and sub_project separated by a / and
            spaces.

            In case if no sub_project is present it is same as name of the
            project.
          example: Fast and Furious / Formula One
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of project.
          example: FF-032
    category:
      type: object
      properties:
        id:
          type: string
          maxLength: 10
          example: '16570'
          description: >
            This id provided by Fyle to identify a category from this
            organisation.

            This id is a numeric string.

            This id is unique within the organisation.
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the category.
        sub_category:
          type: string
          maxLength: 255
          example: Turbo charged
          description: Represents the name of the sub_category.
        display_name:
          type: string
          maxLength: 255
          example: Engine / Turbo charged
          description: >
            This is a combination of name and sub_category separated by a / and
            spaces.

            In case if no sub_category is present it is same as name of the
            category.
        system_category:
          type: string
          maxLength: 255
          example: Others
          description: Represents the name of the system_category.
    created_at:
      type: string
      format: date-time
      description: >
        <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was created.
      readOnly: true
      example: '2020-06-01T13:14:54.804Z'
    updated_at:
      type: string
      format: date-time
      description: >
        <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was updated.
      readOnly: true
      example: '2020-06-11T13:14:55.201598Z'
    report:
      type: object
      readOnly: true
      properties:
        purpose:
          type: string
        approved_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Report was approved.

            This field could be null if the Report was not yet approved.
          example: '2020-07-23T09:32:00.933Z'
        reimbursed_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Expense was Reimbursed.

            If the Expense is not reimbursed yet, this could be null. <br>
          example: '2020-07-28T09:32:00.933Z'
        claim_number:
          type: string
          maxLength: 255
        settlement_id:
          type: string
          maxLength: 255
          description: >
            An unique ID, generated by Fyle, for identifying the Settlement.

            Once a Report is paid, the value of this field cannot be changed and
            is immutable. <br>
          example: setzS7mbPKPWg
        settled_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the report approved was settled. <br>
          example: '2020-07-23T09:32:00.933Z'
        trip_request_id:
          type: string
          description: An ID of the TripRequest associated with it
    file:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          description: |
            Id of the file object. Always starts with `fi`.
          example: figo4lgkn2224
        name:
          type: string
          description: |
            Name of the uploaded file.
          example: uber_expenses_vmrpw.pdf
        type:
          type: string
          enum:
            - THUMBNAILx200x200
            - ORIGINAL
            - ENCRYPTED
          description: >
            Indicates whether this file original size or encrypted or its
            thumbnail image.
          example: ORIGINAL
        password:
          type: string
          description: |
            Password which required to unlock the file.
          example: SuperSecretPassword
        download_path:
          type: string
          description: |
            Link to download this file.
            change this to right url later.
          example: /api/files/fiGxWO1vdkW8/download
    approvals:
      type: object
      description: |
        siginifies all the approvals of a particular object.
      additionalProperties:
        type: object
        properties:
          state:
            type: string
            enum:
              - APPROVED
              - APPROVAL_PENDING
              - APPROVAL_DISABLED
      example:
        oueoblnegf:
          state: APPROVED
    org_id:
      type: string
      description: |
        The unique id of the Organization to which the object is associated.
      example: orwruogwnngg
    org_name:
      type: string
      description: |
        The Name of the Organization to which the object is associated.
      example: Ministry of Magic
    expenses:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          example: tx12345
          description: >-
            An unique string to identify the Expense. Ignore this field when
            used as part of a POST request to create an Expense.
          readOnly: true
        employee_email:
          type: string
          maxLength: 127
          format: email
          description: >
            Email address of the Employee for whom the expense was/will-be
            created. Once an Expense is created, the value of this field cannot
            be changed and is immutable. <br>
          example: john.doe@example.com
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        spent_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the transaction for which the expense [being]
            fyled was made. <br>

            This date cannot be in future.
          example: '2020-07-21T17:32:28Z'
        source:
          type: string
          example: SLACK_APP
          description: >
            The name of the client app which is creating the expense.

            if its a thrid party app, it prefixed with TPA_.

            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If
            not passed, source is saved as TPA.
        currency:
          type: string
          maxLength: 3
          example: USD
          description: >
            ISO 4217 currency codes that are usually of three upper case
            letters.

            See "https://www.iban.com/currency-codes" for examples.

            If this field is ignored during a POST call to create/update an
            Expense, the default currency of the organization will be used.

            To use other currency than default currency use `foreign_currency`
            field.
        amount:
          type: number
          description: >
            The transaction amount for which the expense was/will-be fyled.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>

            Note that, when used as part of creating an Expense via POST, the
            actual amount in the Expense, in a subsequent GET call, may get
            changed either because of policies or admin/approvers changing the
            amount.
          example: 1500
        user_amount:
          type: number
          description: >
            The transaction amount as claimed by user.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>
          example: 1984.18
        policy_amount:
          type: number
          description: >
            The transaction amount which is modified by policy.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>
          example: 1500
        admin_amount:
          type: number
          description: >
            The transaction amount which is modified by admin or approver.

            The amount will be in the currency that the organization is setup
            with in case of GET requests. <br>

            This could be null if admin or approver has not edited your expense.
          example: null
        tax:
          type: number
          description: Tax amount as setup by your organisation.
          deprecated: true
        foreign_currency:
          type: string
          maxLength: 3
          example: INR
          description: >
            ISO 4217 currency codes that are usually of three upper case
            letters.

            See "https://www.iban.com/currency-codes" for examples.

            This field is used when expense is of non-default currency of an
            organisation.
        foreign_amount:
          type: number
          description: >
            The transaction foriegn amount for which the expense was/will-be
            fyled.

            The amount will be in the currency that is mentioned in the `foriegn
            currncy`<br>

            Note that, if an expense of currency other default currency of an
            organistation is used then `amount`, `foreign_currency`,
            `foreign_amount` are mandatory.
          example: 138962.05
        created_by:
          type: string
          maxLength: 255
          description: >
            An unique ID, generated by Fyle, for identifying the Employee who
            created the expense. Once an Expense is created, the value of this
            field cannot be changed and is immutable. <br>
          example: ou12345Zdfx
          readOnly: true
        purpose:
          type: string
          maxLength: 1024
          description: Justification for the expense.
          example: Team lunch
        project_id:
          type: string
          description: >
            The ID generated by Fyle to uniquely identify the Project, to which
            the Expense belongs. <br>
          example: '1234'
        project:
          $ref: '#/components/schemas/project'
        cost_center_id:
          type: string
          description: >
            The ID generated by Fyle to uniquely identify the CostCenter, to
            which the Expense belongs. <br>
          example: '4321'
        cost_centers:
          $ref: '#/components/schemas/cost_center'
        category_id:
          type: string
          description: >
            The unique ID of a Category to which the Expense belongs. <br>

            Use `GET /api/tpa/v1/categories` to get the list of valid ID and
            Name of the Categories for the organization.
          example: '18'
        category:
          $ref: '#/components/schemas/category'
        state:
          type: string
          enum:
            - COMPLETE
            - DRAFT
            - PAID
            - PAYMENT_PROCESSING
            - APPROVER_PENDING
            - PAYMENT_PENDING
            - APPROVED
          description: >-
            The state of the Expense. This field shall be ignored in POST calls
            when creating/updating an Expense.
          readOnly: true
        fund_source:
          type: string
          enum:
            - PERSONAL
            - ADVANCE
            - CCC
          description: >-
            The fund source of the Expense. This field shall be ignored in POST
            calls when creating/updating an Expense.
          readOnly: true
        payment_id:
          type: string
        source_account_id:
          type: string
        source_account_type:
          type: string
        invoice_number:
          type: string
          description: |
            invoice number from the receipt.
        billable:
          type: boolean
          example: true
          description: This fields marks whether a given expense is billable a not.
        reimbursable:
          type: boolean
          example: true
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        expense_number:
          type: string
          description: |
            This is user visible identifier for an expense.
            This field can be used as reference in UI.
          example: E/2020/10/T/95
        exchange_rate:
          type: number
          description: >
            This field determines at which rate the expenses from foriegn
            currency was converted to home curreny
        report_id:
          type: string
          description: |
            Unique id given by Fyle to identify an Expense Report.
        reported_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Expense was submitted via a Report to the
            Approvers.

            If the Expense is not added to a Report yet or if the Report is not
            yet submitted, this could be null.
        report:
          $ref: '#/components/schemas/report'
        physical_bill:
          type: boolean
          description: |
            This field indicated whether physicall bill was received or not.
          example: true
        physical_bill_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp indicating when the Expense's physicall bill was
            submitted.

            If the Expense's bill is not required to be submitted, then this
            could be null.
        verified:
          type: boolean
          description: |
            Indicates whether the Expense is verified or not
          readOnly: true
        verification_state:
          type: string
        verified_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Expense was verified.

            If the Expense is not verified yet, this could be null. <br>
          readOnly: true
        skip_reimbursement:
          type: boolean
          deprecated: true
        vendor:
          type: string
          example: Uber
          maxLength: 255
          description: |
            String denoting the name of the vendor to which the Expense was made
        vendor_id:
          type: string
          example: 24242r
          maxLength: 255
          description: |
            String denoting the id of the vendor to which the Expense was made
        locations:
          description: >
            This field will be present for travel related categories. To add to
            and from location to you travel category related expenses add two
            locations in schema given below.
          type: array
          items:
            $ref: '#/components/schemas/location'
        train_travel_class:
          description: |
            This field is applicable for only Train category.
          type: string
          example: string
        flight_journey_travel_class:
          description: >
            This field is applicable only for flight category. Can be
            `BUSINESS`, `ECONOMY`, `FIRST_CLASS`
          type: string
          example: ECONOMY
        flight_return_travel_class:
          description: >
            This field is applicable only for flight category. Can be
            `BUSINESS`, `ECONOMY`, `FIRST_CLASS`
          type: string
          example: BUSINESS
        bus_travel_class:
          description: |
            This field is applicable only for bus category.
          type: string
          example: AC
        from_dt:
          description: >
            This field is only relevant for travel related categories. This
            represents the onward date.
          type: string
          example: '2019-07-17T00:00:00.000Z'
        to_dt:
          description: >
            This field is only relevant for travel related categories. This
            represents the return date.
          type: string
          example: '2019-07-27T00:00:00.000Z'
        distance:
          type: number
        distance_unit:
          type: string
        num_days:
          type: integer
        mileage_calculated_distance:
          type: number
        mileage_calculated_amount:
          type: number
        mileage_vehicle_type:
          type: string
        mileage_rate:
          type: number
        mileage_is_round_trip:
          type: boolean
        hotel_is_breakfast_provided:
          type: boolean
        per_diem_rate_id:
          type: string
        per_diem_rate:
          $ref: '#/components/schemas/perdiem'
        activity_details:
          type: string
        activity_policy_pending:
          type: boolean
        num_files:
          type: integer
          description: |
            Number of files attached to this Expenses.
        has_attachments:
          type: boolean
          description: >
            Returns if there are file attachments that the Expense has. Usually
            the image of the receipts are added as attachments to the Expenses.
          readOnly: true
        attachments:
          description: >
            This field will not be present in the response for the GET method on
            the `/api/tpa/v1/expenses` call.
          type: array
          items:
            $ref: '#/components/schemas/file'
        custom_properties:
          $ref: '#/components/schemas/custom_properties'
        user_can_delete:
          type: boolean
          description: >
            This field describes whether a user can delete this expenses.

            This is flag is set as false when travel agent creates expenses on
            your behalf.
          example: true
        policy_flag:
          type: boolean
          description: >-
            This field indicates whether policy execution has flagged this
            expenses or not.
          example: false
        manual_flag:
          type: boolean
          description: >
            This field indicates whether this expenses was manually flagged by
            approver or finance or admin.
          example: true
        policy_state:
          type: string
          enum:
            - FAILED
            - SUCCESS
            - RUNNING
          description: >
            This fields shows policy execution state for this expenses.

            If this field is null then its policy has not yet run on this
            expenses.
        extracted_data:
          type: object
        transcribed_data:
          type: object
        user_review_needed:
          type: boolean
        mandatory_fields_present:
          type: boolean
        transcription_state:
          type: string
          enum:
            - IN_PROGRESS
            - SUCCESS
            - FAILURE
            - NO_WORK
          example: SUCCESS
        receipt_required:
          type: boolean
        is_holiday_expense:
          type: boolean
        risk_state:
          type: string
          enum:
            - HIGH_RISK
            - MODERATE_RISK
            - NO_RISK
          example: NO_RISK
        external_id:
          type: string
        split_group_id:
          type: string
        split_group_user_amount:
          type: string
        external_expense:
          type: object
        corporate_credit_card_transaction:
          type: object
        transaction_approvals:
          allOf:
            $ref: '#/components/schemas/approvals'
          example:
            ougelgneget:
              state: APPROVED
            ougo3nlwfgg:
              state: APPROVAL_PENDING
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
    get_expenses:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/expenses
        data:
          type: array
          items:
            $ref: '#/components/schemas/expenses'
    name:
      type: string
      description: |
        This field specifies the name of the custom property.
      example: Vendor desciption
    type:
      type: string
      description: |
        This field specifies the type of the custom property.
      example: TEXT
    options:
      type: array
      items:
        type: string
      description: >
        This field specifies the option values of the custom property in case on
        SELECT or MULTI_SELECT custom property type.
      example:
        - Chai
        - Coffee
    placeholder:
      type: string
      description: |
        This field specifies the placeholder of the custom property.
      example: Enter vendor
    org_category_ids:
      type: array
      items:
        type: integer
      description: >
        This field specifies the org category ids associated with the custom
        property.
      example:
        - 1
        - 3
    enabled:
      type: boolean
      description: |
        This field specifies if the object is enabled or not.
      example: true
    mandatory:
      type: boolean
      description: |
        This field specifies if the custom property is mandatory or not.
      example: true
    expense_custom_properties:
      type: object
      properties:
        id:
          type: number
          description: >
            This id is provided by Fyle to identify a particular custom
            property.
          readOnly: true
          example: 7
        name:
          $ref: '#/components/schemas/name'
        type:
          $ref: '#/components/schemas/type'
        options:
          $ref: '#/components/schemas/options'
        placeholder:
          $ref: '#/components/schemas/placeholder'
        org_category_ids:
          $ref: '#/components/schemas/org_category_ids'
        enabled:
          $ref: '#/components/schemas/enabled'
        mandatory:
          $ref: '#/components/schemas/mandatory'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    get_expense_custom_properties:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/expense_custom_properties
        data:
          type: array
          items:
            $ref: '#/components/schemas/expense_custom_properties'
    currency:
      type: string
      maxLength: 10
      description: >
        The three-letter currency code following ISO standard <a
        href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>
      example: USD
    amount:
      type: integer
      description: |
        Amount value of the object.
      example: 100
    export_info:
      type: object
      readOnly: true
      description: Accounting export information for this object.
      properties:
        exported:
          type: boolean
          description: >
            Signifies whether this object has been exported to external
            accounting system or not.
          example: true
        exported_at:
          type: string
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies when this object was exported to external accounting
            system or not.
          example: '2020-06-01T13:14:54.804Z'
        exported_ids:
          type: array
          items:
            type: string
          description: |
            Array of export IDs 
          example:
            - tpe7sY2bHfl8
            - tpe7fs7wvLU9
    reports:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a Expense report.
            This id is always prefixed with `rp`.
          readOnly: true
          example: rpevetgn3kl
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee_email:
          type: string
          maxLength: 127
          format: email
          description: >
            Email address of the Employee for whom the expense was/will-be
            created. Once an Expense is created, the value of this field cannot
            be changed and is immutable. <br>
          example: john.doe@example.com
        employee:
          $ref: '#/components/schemas/minimals_employees'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        submitted_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Report was submitted to the Approvers.

            If the Report is not yet submitted, this could be null. <br>
          readOnly: true
        purpose:
          type: string
        claim_number:
          type: string
          maxLength: 255
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        tax:
          type: number
        state:
          type: string
        source:
          type: string
        approved_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Report was approved. This field could be null
            if the Report was not yet approved.
          readOnly: true
        verified:
          type: boolean
          description: Indicates whether the Report is verified or not
          readOnly: true
        verified_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Report was verified. If the Report is not
            verified yet, this could be null.
          readOnly: true
        reimbursed_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the Report was Reimbursed. If the Report is not
            reimbursed or submitted yet, this could be null.
          readOnly: true
        settlement_id:
          type: string
          readOnly: true
          maxLength: 255
          description: >
            An unique ID, generated by Fyle, for identifying the Settlement.
            Once a Report is paid, the value of this field cannot be changed and
            is immutable. <br>
          example: setzS7mbPKPWg
        settled_at:
          readOnly: true
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the report approved was settled. <br>
          example: '2017-07-21T17:32:28Z'
        num_transactions:
          type: integer
        expense_ids:
          type: array
          items:
            type: string
        verification_state:
          type: string
        created_by:
          type: string
        trip_request_id:
          type: string
        physical_bill:
          type: boolean
        physical_bill_at:
          type: string
        manual_flag:
          type: boolean
        policy_flag:
          type: boolean
        type:
          type: string
        from_dt:
          type: string
        to_dt:
          type: string
        locations:
          type: array
          items:
            $ref: '#/components/schemas/location'
        report_approvals:
          type: object
        org_name:
          $ref: '#/components/schemas/org_name'
        org_id:
          $ref: '#/components/schemas/org_id'
        export_info:
          $ref: '#/components/schemas/export_info'
    get_reports:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/expenses
        data:
          type: array
          items:
            $ref: '#/components/schemas/reports'
    advance_request_id:
      type: string
      maxLength: 255
      description: >
        This id is provided by Fyle to identify an advance request from this
        organisation.

        This id is always prefixed with `areq`.
      example: areq0AluN2n1RE
    email:
      type: string
      format: email
      maxLength: 127
      example: john.doe@example.com
      description: >
        An immutable field that represents the email address.

        Must be compliant with <a href="https://www.ietf.org/rfc/rfc822.txt">RFC
        822.</a>
    advance_id:
      type: string
      maxLength: 255
      description: >
        This id is provided by Fyle to identify an advance from this
        organisation.

        This id is always prefixed with `adv`.
      example: advZP7QXFbHH4
    advance_request_number:
      type: string
      maxLength: 255
      description: >
        This value is provided by Fyle to facilitate easy identification of an
        advance request
      example: AR/2019/03/R/2
    trip_request_id:
      type: string
      maxLength: 255
      description: >
        This id is provided by Fyle to identify a trip request from this
        organisation.

        This id is always prefixed with `tr`.
      example: trObdH5YgKzL
    approved_at:
      type: string
      format: date-time
      description: >
        <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was approved.
      readOnly: true
      example: '2020-07-03T18:19:31.193Z'
    project_id:
      type: string
      maxLength: 255
      description: >
        This id is provided by Fyle to identify a project from this
        organisation.

        This id is a numeric string.

        This id is unique within the organisation.
      example: '2391'
    policy_state:
      type: string
      enum:
        - SUCCESS
        - FAILED
      description: |
        Enum value signifying the action of policy on this object.
      example: SUCCESS
    policy_flag:
      type: boolean
      readOnly: true
      description: |
        Flag to indicate if this object has been processed by policy.
      example: true
    is_sent_back:
      type: boolean
      description: |
        Flag which indicates if this object was sent back for clarification.
      example: false
    is_pulled_back:
      type: boolean
      description: |
        Flag which indicates if this object was pulled back by the requestor.
      example: false
    advance_requests:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/advance_request_id'
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee_email:
          $ref: '#/components/schemas/email'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        advance_id:
          $ref: '#/components/schemas/advance_id'
        advance_request_number:
          $ref: '#/components/schemas/advance_request_number'
        trip_request_id:
          $ref: '#/components/schemas/trip_request_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        approved_at:
          $ref: '#/components/schemas/approved_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        notes:
          type: string
          description: |
            Optional descriptive notes which can be added to an advance request.
          example: onsite client meeting
        purpose:
          type: string
          description: |
            Descriptive purpose which is added to an advance request.
          example: onsite client meeting
        state:
          type: string
          enum:
            - DRAFT
            - APPROVAL_PENDING
            - APPROVED
            - REJECTED
            - PAID
          description: |
            State of the advance request.
          example: PAID
        project_id:
          $ref: '#/components/schemas/project_id'
        project:
          $ref: '#/components/schemas/project'
        custom_properties:
          $ref: '#/components/schemas/custom_properties'
        policy_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            Amount set by policy
        policy_state:
          $ref: '#/components/schemas/policy_state'
        policy_flag:
          $ref: '#/components/schemas/policy_flag'
        is_sent_back:
          $ref: '#/components/schemas/is_sent_back'
        is_pulled_back:
          $ref: '#/components/schemas/is_pulled_back'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        source:
          type: string
          enum:
            - WEBAPP
            - MOBILE
          description: >
            Enum value signifying the client method from which this
            advance_request was initiated.
          example: WEBAPP
        advance_request_approvals:
          $ref: '#/components/schemas/approvals'
        export_info:
          $ref: '#/components/schemas/export_info'
    get_advance_requests:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/advance_requests
        data:
          type: array
          items:
            $ref: '#/components/schemas/advance_requests'
    advances:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/advance_id'
        assingee_id:
          $ref: '#/components/schemas/employee_id'
        assignee_email:
          $ref: '#/components/schemas/email'
        assignee:
          $ref: '#/components/schemas/minimals_employees'
        issuer_id:
          allOf:
            $ref: '#/components/schemas/employee_id'
          description: |
            Employee id of person who issued the advance.
          example: ouebvjwgjgl
        issuer_email:
          allOf:
            $ref: '#/components/schemas/email'
          description: |
            Email of the person who issued the advance.
          example: issuer@example.com
        issuer:
          allOf:
            $ref: '#/components/schemas/minimals_employees'
          description: |
            Details for the person who issued the advance.
          example: null
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        advance_request_id:
          $ref: '#/components/schemas/advance_request_id'
        advance_number:
          type: string
        trip_request_id:
          $ref: '#/components/schemas/trip_request_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        approved_at:
          $ref: '#/components/schemas/approved_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        purpose:
          type: string
          description: |
            Descriptive purpose which is added to an advance request.
          example: onsite client meeting
        project_id:
          $ref: '#/components/schemas/project_id'
        project:
          $ref: '#/components/schemas/project'
        custom_properties:
          $ref: '#/components/schemas/custom_properties'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        source:
          type: string
          enum:
            - WEBAPP
            - MOBILE
          description: >
            Enum value signifying the client method from which this
            advance_request was initiated.
          example: WEBAPP
        export_info:
          $ref: '#/components/schemas/export_info'
        mode:
          type: string
          enum:
            - CASH
            - BANK_TRANSFER
            - FOREX
            - CHEQUE_DD
          example: CASH
        card_number:
          type: string
        reference_code:
          type: string
          description: |
            This is used to store external system's unique identifier.
          example: ITIvwowggwng
        settlement_id:
          type: string
          maxLength: 255
          description: >
            An unique ID, generated by Fyle, for identifying the Settlement.

            Once a Report is paid, the value of this field cannot be changed and
            is immutable. <br>
          example: setzS7mbPKPWg
        settled_at:
          type: string
          format: date-time
          description: >
            RFC 3339, section 5.6
            "https://tools.ietf.org/html/rfc3339#section-5.6" compliant
            timestamp on which the report approved was settled. <br>
          example: '2020-07-23T09:32:00.933Z'
        advance_request_approvals:
          $ref: '#/components/schemas/approvals'
    get_advances:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/advances
        data:
          type: array
          items:
            $ref: '#/components/schemas/advances'
    settlement_id:
      type: string
      maxLength: 255
      description: |
        Unique identifier of settlement object linked to this object.
      example: setd8Ywn4n0H
    reimbursements:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a reimbursement.
            This id is always prefixed with `reim`.
          readOnly: true
          example: reimntGt9ju6qP
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        state:
          type: string
          enum:
            - COMPLETE
            - PENDING
          description: |
            State of the reimbursement.
          example: COMPLETE
        unique_id:
          type: string
          description: >
            A unique, organization wide identifier for a particular
            reimbursement.<br>

            This id is always prefixed with `P/`.
          example: P/2020/11/29
        accounting_exported:
          type: boolean
          description: >
            Boolean value which signifies whether the particular reimbursement
            has been exported using any accounting integration (like QBO).
          example: true
        settlement_id:
          $ref: '#/components/schemas/settlement_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        creator_id:
          type: string
          maxLength: 255
          description: >
            Employee id of creator if this reimbursement which uniquely identify
            an the creator within an organization.

            This id is always prefixed with `ou`.
          readOnly: true
          example: outGt9ju6qP
        creator:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who created this reimbursement.
        mode:
          type: string
          enum:
            - ACH
            - OFFLINE
          description: |
            Mode of creation of this reimbursement.
          example: OFFLINE
        ach_state:
          type: string
          enum:
            - ACH_INITIATED
            - ACH_COMPLETE
            - ACH_FAILED
            - ACH_RETRY
          description: |
            Status of ACH if this reimbursment is processed via ACH.
          example: ACH_COMPLETE
        export_info:
          $ref: '#/components/schemas/export_info'
    get_reimbursements:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/reimbursements
        data:
          type: array
          items:
            $ref: '#/components/schemas/reimbursements'
    foreign_currency:
      type: string
      description: >
        The three-letter currency code following ISO standard <a
        href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.

        Original currency signifies the currency in which the object
        (expense/advance/refund/etc.) was originally created.
      example: USD
    foreign_amount:
      type: integer
      description: >
        Amount value of the object, in original currency i.e the currency in
        which the object was initially created.
      example: 100
    payment_id:
      type: string
      maxLength: 255
      description: |
        Unique identifier of payments object linked to this object.
      example: payaSOemadma7
    refunds:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a refund.
            This id is always prefixed with `ref`.
          readOnly: true
          example: refDml2wrWqk1
        collector_id:
          type: string
          maxLength: 255
          description: >
            Employee ID of collector of the refund.

            This ID prodvided by Fyle to uniquely identify an employee within an
            organization.

            This ID is always prefixed with `ou`.
          example: outGt9ju6qP
        collector:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who is the collector of this refund.
        returnee_id:
          type: string
          maxLength: 255
          description: >
            Employee ID of returnee of the refund.

            This ID prodvided by Fyle to uniquely identify an employee within an
            organization.

            This ID is always prefixed with `ou`.
          example: oul8zTHMnTjp
        returnee:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who is the returnee of this refund.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        payment_mode:
          type: string
          enum:
            - CASH
            - BANK_TRANSFER
            - FOREX
            - CHEQUE_DD
          maxLength: 255
          description: |
            Mode of payment for a refund object.
          example: BANK_TRANSFER
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        reference:
          type: string
          description: |
            Reference code of a refund object.
          example: 6t2uygfhjdhs
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        note:
          type: string
          description: |
            Optional descriptive note which can be added to a refund.
          example: august's pending amount refund
        settlement_id:
          $ref: '#/components/schemas/settlement_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        returned_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies when this refund was returned by returnee.
          example: '2020-06-01T13:14:54.804Z'
        card_number:
          type: string
          description: |
            Last 4 or 6 digits of the card used for payment of this refund.
          example: '2838'
        payment_id:
          $ref: '#/components/schemas/payment_id'
        source:
          type: string
          enum:
            - WEBAPP
            - WEBAPP_BULK_EXCEL
          description: >
            Enum value signifying the client method from which this refund was
            initiated.
          example: WEBAPP_BULK_EXCEL
        export_info:
          $ref: '#/components/schemas/export_info'
    get_refunds:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/refunds
        data:
          type: array
          items:
            $ref: '#/components/schemas/refunds'
    settlements:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a settlement.
            This id is always prefixed with `set`.
          readOnly: true
          example: setmntGt9ju6qP
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        opening_dt:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies the opening date of this settlement.
          example: '2020-06-01T13:14:54.804Z'
        closing_dt:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies the closing date of this settlement.
          example: '2020-06-01T13:14:54.804Z'
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        reimbursement_id:
          type: string
          maxLength: 255
          description: |
            Unique identifier of reimbursement object linked to this settlement.
          example: reimd8Ywn4n0H
        creator_id:
          type: string
          maxLength: 255
          description: >
            Employee id of creator of the reimbursement linked to this
            settlement, which uniquely identify an employee within an
            organization.

            This id is always prefixed with `ou`.
          readOnly: true
          example: outGt9ju6qP
        creator:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: >
            Details of employee who created the reimbursement linked to this
            settlement.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        export_info:
          $ref: '#/components/schemas/export_info'
        settlement_number:
          type: integer
          description: >
            A number to identify an employee's settlement. It is unique for all
            settlements of an employee.
          example: 39
        total_opening_balance:
          type: integer
          description: |
            Value of opening amount of this settlement.
          example: 1500
        total_closing_balance:
          type: integer
          description: |
            Value of closing amount of this settlement.
          example: 2500
        currency:
          $ref: '#/components/schemas/currency'
    get_settlements:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/settlements
        data:
          type: array
          items:
            $ref: '#/components/schemas/settlements'
    balance_transfers:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a balance transfer.
            This id is always prefixed with `bt`.
          readOnly: true
          example: btLL7YJKZHMz
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        issuer_id:
          type: string
          maxLength: 255
          description: >
            Employee ID of issuer of the balance transfer.

            This ID prodvided by Fyle to uniquely identify an employee within an
            organization.

            This ID is always prefixed with `ou`.
          example: oul8zTHMnTjp
        issuer:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who issued this balance transfer.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        note:
          type: string
          description: |
            Optional descriptive note which can be added to a refund.
          example: august's pending amount refund
        issued_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies when this balance transfer was issued by issuer.
          example: '2020-06-01T13:14:54.804Z'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        source_account:
          type: string
          description: >
            Signifies name of account with which this balance transfer is
            associated.

            Few sample values : Advance Account, Corporate Credit Card Account,
            Organization Category Account
          example: Personal Account
        export_info:
          $ref: '#/components/schemas/export_info'
    get_balance_transfers:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/balance_transfers
        data:
          type: array
          items:
            $ref: '#/components/schemas/balance_transfers'
    projects:
      type: object
      properties:
        id:
          type: string
          maxLength: 10
          description: >
            This id provided by Fyle to identify a project from this
            organisation.

            This id is a numeric string.

            This id is unique within the organisation.
          readOnly: true
          example: '2391'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        display_name:
          type: string
          maxLength: 513
          description: >
            This is a combination of name and sub_project separated by a / and
            spaces.

            In case if no sub_project is present it is same as name of the
            project.
          example: Fast and Furious / Formula One
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of project.
          example: FF-032
        description:
          type: string
          maxLength: 255
          description: |
            This represents the description of project.
          example: Win the trophy
        enabled:
          type: boolean
          description: >
            This indicates if the project is enabled for use within the
            organisation.
          default: true
          example: true
        category_ids:
          type: array
          description: >
            Has the list of all category ids that are applicable for this
            project.
          items:
            type: string
          example:
            - '16570'
        categories:
          type: array
          description: |
            This list of categories that are applicable for this project.
          items:
            $ref: '#/components/schemas/category'
        primary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: >
            Primary approver who will be added as an approver by default for all
            the submitted reports and expenses.
          example:
            full_name: primary approver
            email: primary_approver@example.com
        primary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the primary approver.
          example: ou4b24ugv3vg
        secondary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            A secondary approver who can be added to reports via policies.
          example:
            full_name: secondary approver
            email: secondary_approver@example.com
        secondary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the secondary approver.
          example: ourjgeugv3vg
    get_projects:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/projects
        data:
          type: array
          items:
            $ref: '#/components/schemas/projects'
    requests_projects:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/projects'
        test:
          type: boolean
          example: false
          default: false
      required:
        - data
    post_projects:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: >
            This id provided by Fyle to identify a project from this
            organisation.

            This id is a numeric string.

            This id is unique within the organisation.
          readOnly: true
          example: '2391'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of project.
          example: FF-032
    cost_centers:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: >
            This is provided by Fyle to identify a cost center from this
            organisation.
          readOnly: true
          example: '1'
        name:
          type: string
          maxLength: 255
          description: |
            This represents the name of the cost center.
          example: sales & marketing
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of cost center.
          example: sm-cc
        description:
          type: string
          maxLength: 255
          description: |
            This field provides a decription about the cost center.
          example: Initial Cost center
        enabled:
          type: boolean
          description: |
            This field specifies if the current cost center is enabled or not.
          example: true
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    get_cost_centers:
      type: object
      properties:
        count:
          $ref: '#/components/schemas/count'
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/cost_centers
        data:
          type: array
          items:
            $ref: '#/components/schemas/cost_centers'
    requests_cost_centers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/cost_centers'
        test:
          type: boolean
          example: false
          default: false
      required:
        - data
    orgs:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/org_id'
        name:
          $ref: '#/components/schemas/org_name'
        domain:
          type: string
          maxLength: 255
          description: >
            This field specifies the domain with which the organisation is
            registered.
          example: example.com
        currency:
          type: string
          maxLength: 255
          description: |
            This field specifies the default currency to be used in expenses.
          example: INR
        branch_ifsc:
          type: string
          maxLength: 255
          description: >
            This is the IFSC code of the bank branch with which the organisation
            is associated.
          example: HDFC0122333
        branch_account:
          type: string
          maxLength: 255
          description: >
            This field specifies the bank branch with which the organisation is
            associated.
          example: '2019238034424802'
        verified:
          type: boolean
          description: |
            This field specifies if the organisation is verified or not.
          example: true
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    get_orgs:
      type: object
      properties:
        count:
          allOf:
            - $ref: '#/components/schemas/count'
          example: 1
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v4/admin/orgs
        data:
          type: array
          items:
            $ref: '#/components/schemas/orgs'
tags:
  - name: Employees
    description: |
      These APIs gives you access to manage your organisation's Employees data.
  - name: Expenses
    description: |
      This API gives you access to your organisation's Expenses data.
  - name: Expense Custom Properties
    description: >
      This API gives you access to your organisation's Expenses Custom
      Properties data.
  - name: Reports
    description: |
      This API gives you access to your organisation's Expense Reports data.
  - name: Advances
    description: |
      This API gives you access to Issued Advances data of your organisation.
  - name: Advance Requests
    description: |
      This API gives you access to your organisation's Advance requests data.
  - name: Reimbursements
    description: >
      These APIs gives you access to manage your organisation's Reimbursements
      data.
  - name: Projects
    description: |
      These APIs gives you access to manage your organisation's Projects data.
  - name: Cost Centers
    description: >
      These APIs gives you access to manage your organisation's Cost Centers
      data.
  - name: Refunds
    description: |
      These APIs gives you access to manage your organisation's Refunds data.
  - name: Settlements
    description: >
      These APIs gives you access to manage your organisation's Settlements
      data.
  - name: Balance Transfers
    description: >
      These APIs gives you access to manage your organisation's balance
      transfers data.
  - name: Orgs
    description: |
      This API gives you access to your current org data.
paths:
  /v4/admin/employees:
    get:
      tags:
        - Employees
      summary: |
        Returns a list of employees.
      operationId: GetEmployees
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/org_id'
        - in: query
          name: id
          schema:
            type: string
          description: |
            Filters the objects by id. For single value use `id=eq.<value>`.
            For mulitple values, use `id=in.(value1,value2,value3)`. <br>
            Supported operators: `in`, `eq`, `not.in`, `not.eq`
          example: eq.ouvjegwriw
        - in: query
          name: email
          description: |
            This param is used to filter records based on employee email.
            Supported operators are `in`,`eq`.<br>
          schema:
            type: string
            format: email
          example: eq.employee1@example.com
        - in: query
          name: order
          description: |
            use comma separated column names for sorting the results.
            For sorting in descending order, use `column_name.desc`
          schema:
            type: string
          example: 'created_at.desc,id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_employees'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Employees
      summary: |
        upsert employees
      description: >
        creates or update employees in bulk. This API is written in such way to
        support bulk operations only.
      operationId: PosEmployees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests_employees'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: /v4/admin/employees
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/post_employees'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: john.doe@example.com
                        message: Invalid or disabled approver 1 email
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/expenses:
    get:
      tags:
        - Expenses
      summary: |
        Returns a list of expenses.
      operationId: GetExpenses
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/employee_email'
        - in: query
          name: id
          schema:
            type: string
          description: |
            Filters the objects by id. For single value use `id=eq.<value>`.
            For mulitple values, use `id=in.(value1,value2,value3)`. <br>
            Supported operators: `in`, `eq`, `not.in`, `not.eq`
          example: eq.txg3053jg33
        - in: query
          name: order
          description: |
            use comma separated column names for sorting the results.
            For sorting in descending order, use `column_name.desc`
          schema:
            type: string
          example: 'created_at.desc,id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_expenses'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /v4/admin/expense_custom_properties:
    get:
      tags:
        - Expense Custom Properties
      summary: Returns a list of expense custom Properties
      operationId: GetExpenseCustomProperties
      parameters:
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/options'
        - $ref: '#/components/parameters/mandatory'
        - $ref: '#/components/parameters/org_category_ids'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_expense_custom_properties'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /v4/admin/reports:
    get:
      tags:
        - Reports
      summary: Returns a list of Reports
      operationId: GetReports
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_reports'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /v4/admin/advance_requests:
    get:
      tags:
        - Advance Requests
      summary: Returns a list of Advance Request objects.
      operationId: GetAdvanceRequests
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/approved_at'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/advance_id'
        - $ref: '#/components/parameters/advance_request_number'
        - $ref: '#/components/parameters/trip_request_id'
        - $ref: '#/components/parameters/is_sent_back'
        - $ref: '#/components/parameters/is_pulled_back'
        - $ref: '#/components/parameters/policy_amount'
        - $ref: '#/components/parameters/policy_state'
        - $ref: '#/components/parameters/policy_flag'
        - $ref: '#/components/parameters/employee_id'
        - $ref: '#/components/parameters/employee_code'
        - $ref: '#/components/parameters/employee_email'
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_advance_requests'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/advances:
    get:
      tags:
        - Advances
      summary: Returns a list of Issued Advances objects.
      operationId: GetAdvances
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/approved_at'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/advance_id'
        - $ref: '#/components/parameters/advance_request_number'
        - $ref: '#/components/parameters/trip_request_id'
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_advances'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/reimbursements:
    get:
      tags:
        - Reimbursements
      summary: Returns a list of reimbursement objects.
      operationId: GetReimbursements
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/employee_id'
        - $ref: '#/components/parameters/employee_user_id'
        - $ref: '#/components/parameters/employee_code'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/settlement_id'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
        - $ref: '#/components/parameters/payment_id'
        - $ref: '#/components/parameters/reimbursements_state'
        - $ref: '#/components/parameters/purpose'
        - $ref: '#/components/parameters/unique_id'
        - $ref: '#/components/parameters/accounting_exported'
        - $ref: '#/components/parameters/mode'
        - $ref: '#/components/parameters/ach_state'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_reimbursements'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/refunds:
    get:
      tags:
        - Refunds
      summary: Returns a list of Refund objects.
      operationId: GetRefunds
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/foreign_currency'
        - $ref: '#/components/parameters/foreign_amount'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
        - $ref: '#/components/parameters/payment_id'
        - $ref: '#/components/parameters/payment_mode'
        - $ref: '#/components/parameters/collector_id'
        - $ref: '#/components/parameters/returnee_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_refunds'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/settlements:
    get:
      tags:
        - Settlements
      summary: Returns a list of settlement objects.
      operationId: GetSettlements
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/employee_id'
        - $ref: '#/components/parameters/employee_user_id'
        - $ref: '#/components/parameters/employee_code'
        - $ref: '#/components/parameters/opening_dt'
        - $ref: '#/components/parameters/closing_dt'
        - $ref: '#/components/parameters/total_opening_balance'
        - $ref: '#/components/parameters/total_closing_balance'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_settlements'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/balance_transfers:
    get:
      tags:
        - Balance Transfers
      summary: Returns a list of Balance Transfer objects.
      operationId: GetBalanceTransfers
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
        - $ref: '#/components/parameters/issued_at'
        - $ref: '#/components/parameters/issuer_id'
        - $ref: '#/components/parameters/source_account'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_balance_transfers'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/projects:
    get:
      tags:
        - Projects
      summary: Returns a list of projects
      operationId: GetProjects
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/id'
        - in: query
          name: name
          description: |
            Supported operators are `eq`, `like`, `in`.<br>
            name=in.(value1,value2)
          schema:
            type: string
            example: eq.Project1
        - $ref: '#/components/parameters/sub_project'
        - $ref: '#/components/parameters/display_name'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/code'
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/category_ids'
        - $ref: '#/components/parameters/primary_approver_id'
        - $ref: '#/components/parameters/secondary_approver_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_projects'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Projects
      summary: upsert projects
      description: >
        creates or updates projects in bulk. This API is written in such a way
        to support bulk operations only.
      operationId: PostProjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests_projects'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: /v4/admin/projects
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/post_projects'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: Project abcd
                        message: Invalid or duplicate project code
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/cost_centers:
    get:
      tags:
        - Cost Centers
      summary: Returns a list of cost Centers
      operationId: GetCostCenters
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/cost_centers_name'
        - $ref: '#/components/parameters/cost_centers_id'
        - $ref: '#/components/parameters/cost_centers_code'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_cost_centers'
        '401':
          description: Unauthoried request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Cost Centers
      summary: upsert cost Centers
      description: >
        creates or updates cost centers in bulk. This API is written in such a
        way to support bulk operations only.
      operationId: PostCostCenters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests_cost_centers'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: /v4/admin/cost_centers
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/cost_center'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: Cost center abcd
                        message: Invalid or duplicate cost center code
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/orgs:
    get:
      tags:
        - Orgs
      summary: >-
        Returns a list with a single element, i.e., organisation of the current
        user.
      operationId: GetOrgs
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_orgs'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
