openapi: 3.0.3
info:
  version: '3.0'
  title: Fyle REST API
  contact:
    name: Integrations
    email: support@fyle.in
servers:
  - url: 'https://accounts.fylehq.com'
    description: Live Server
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.fylehq.com/app/developers/#/oauth/authorize'
          tokenUrl: 'https://accounts.fylehq.com/oauth/token'
          scopes:
            admin.*: Grant all ADMIN actions
  parameters:
    offset:
      in: query
      name: offest
      description: |
        offset is used to skip that many number of objects before counting. <br>
      schema:
        type: integer
        example: 10
    limit:
      in: query
      name: limit
      description: >
        A limit on the number of objects to be returned. Allowed values are from
        1 to 200.
      schema:
        type: integer
        example: 100
        default: 200
    created_at:
      in: query
      name: created_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        created_at=gte.2020-06-01T00:00:00.000Z filters all employees created on
        or after 1st Jun 2020.<br>

        created_at=gte.2020-06-01T00:00:00.000Z&created_at=lt.2020-07-01T00:00:00.000Z
        filters all employees `created` in the month of Jun 2020.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    updated_at:
      in: query
      name: updated_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z filters all employees updated on
        or after 1st Jun 2020.<br>

        updated_at=gte.2020-06-01T00:00:00.000Z&updated_at=lt.2020-07-01T00:00:00.000Z
        filters all employees `updated` in the month of Jun 2020.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    org_id:
      in: query
      name: org_id
      description: |
        This param is used to filter records based org id.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.orvneouegi
    enabled:
      in: query
      name: enabled
      description: |
        This param is used to filer records by
        Supported operators are `eq`,`not.eq`.<br>
      schema:
        type: string
        example: eq.true
    name:
      in: query
      name: name
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        name=in.(value1,value2)
      schema:
        type: string
        example: like.ABCD*
    id:
      in: query
      name: id
      description: |
        This param is used to filter cost center record based on cost center id.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.7
    code:
      in: query
      name: code
      description: |
        Supported operators are `in`,`eq`,`like`.<br>
      schema:
        type: string
        example: eq.CC01
    employee_id:
      in: query
      name: employee_id
      description: |
        This param is used to filer records based employee id.
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    employee_user_id:
      in: query
      name: employee->user_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.usIfhs65KvvF
    employee_code:
      in: query
      name: employee->employee_code
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.DFS552KK
    currency:
      in: query
      name: currency
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        currency=in.(value1,value2)
      schema:
        type: string
        example: 'in.(USD,INR)'
    amount:
      in: query
      name: amount
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
        amount=in.(value1,value2)
      schema:
        type: string
        example: eq.100
    settlement_id:
      in: query
      name: settlement_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.setRd8Dw5hD
    exported:
      in: query
      name: export_info->exported
      description: 'Supported operators are `eq`,`not.eq`.<br>'
      schema:
        type: string
        example: eq.false
    exported_at:
      in: query
      name: export_info->exported_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    export_ids:
      in: query
      name: export_info->export_ids
      description: |
        Supported operators are `eq`,`cs`.<br>
      schema:
        type: string
        example: 'cs.{expD3QWBgoZ2U,expf9H3sh1B}'
    payment_id:
      in: query
      name: payment_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.pay3hGs8ne
    state:
      in: query
      name: state
      description: |
        Possible values : COMPLETE, PENDING.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(COMPLETE)
    purpose:
      in: query
      name: purpose
      description: |
        Supported operators are `eq`, `like`.<br>
      schema:
        type: string
        example: like.(trip*)
    unique_id:
      in: query
      name: unique_id
      description: |
        Sample values :  `P/2020/06/R/205`.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: eq.P/2020/06/R/205
    accounting_exported:
      in: query
      name: accounting_exported
      description: |
        Possible values : true, false.<br>
        Supported operators are `eq`, `in`.<br>
      schema:
        type: string
        example: accounting_exported=eq.true
    mode:
      in: query
      name: mode
      description: |
        Possible values : ACH, OFFLINE.<br>
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(ACH)
    ach_state:
      in: query
      name: ach_state
      description: >
        Possible values : ACH_INITIATED, ACH_COMPLETE, ACH_FAILED,
        ACH_RETRY.<br>

        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(ACH_COMPLETE)
    foreign_currency:
      in: query
      name: original_currency
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: 'in.(USD,INR)'
    foreign_amount:
      in: query
      name: original_amount
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
      schema:
        type: string
        example: eq.100
    payment_mode:
      in: query
      name: payment_mode
      description: |
        Supported operators for filtering are : `eq`.
      schema:
        type: string
        example: eq.BANK_TRANSFER
    collector_id:
      in: query
      name: collector_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    returnee_id:
      in: query
      name: returnee_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    opening_dt:
      in: query
      name: opening_dt
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    closing_dt:
      in: query
      name: closing_dt
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    total_opening_balance:
      in: query
      name: total_opening_balance
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
        total_opening_balance=in.(value1,value2)
      schema:
        type: string
        example: eq.100
    total_closing_balance:
      in: query
      name: total_closing_balance
      description: |
        Supported operators are `eq`,`gte`,`lte`,`gt`,`lt`,`in`.<br>
        total_closing_balance=in.(value1,value2)
      schema:
        type: string
        example: eq.100
    issued_at:
      in: query
      name: issued_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.<br>
      schema:
        type: string
        example: 'gte.2020-06-01T00:00:00.000Z'
    issuer_id:
      in: query
      name: issuer_id
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.ouvneouegi
    source_account:
      in: query
      name: source_account
      description: |
        Supported operators are `in`,`eq`.<br>
      schema:
        type: string
        example: eq.Personal Account
  schemas:
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: >
            This error means that the input access token is either not issued by
            Fyle or has expired.

            You need to generate a new access token.
    '403':
      type: object
      properties:
        message:
          enum:
            - Forbidden
          type: string
          description: >
            This error means current user does not have enough permissions to
            perform this operation.
    offset:
      description: >
        offset is used to skip that many number of objects before counting. <br>

        For example, if there are 2000 objects, <br>

        The first request will have offset as 0 and limit as 1000 to return
        first 1000 objects. <br>

        The second request will have offset as 1000 and limit as 1000 to return
        next 1000 objects. <br>
      type: integer
      example: 10
      default: 200
    limit:
      description: |
        The actual number of objects that are returned in the response.
      type: integer
      example: 100
    level:
      type: object
      properties:
        name:
          type: string
          description: |
            Level name of the employees
          example: Associate I
        band:
          type: string
          description: >
            Band in which this level belongs to, you can group mulitple levels
            into a single band.
          example: Associate
        rank:
          type: integer
          description: >
            Rank in which this level belongs to. We recommend to assign higher
            rank for senior people in the org trees and

            lower rank for employees in leaf of org tree.
          example: 1
    department:
      type: object
      properties:
        name:
          type: string
          example: Sales
        subDepartment:
          type: string
          example: Outbound Sales
    user:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 127
          description: >
            An immutable field that represents the email address of the
            Employee.

            Must be compliant with <a
            href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
          example: john.doe@example.com
        full_name:
          type: string
          maxLength: 255
          description: >
            Represents the full name of the Employee. Must be at least 3
            characters.
          example: John Doe
    cost_center:
      type: object
      properties:
        id:
          type: string
          example: '11539'
        name:
          type: string
          maxLength: 255
          example: sales & marketing
        code:
          type: string
          example: sm-cc
    perdiem:
      type: object
      properties:
        id:
          type: string
          example: '1104'
        name:
          type: string
          maxLength: 255
          example: sales & marketing
        currency:
          type: string
          maxLength: 3
          example: USD
        rate:
          type: integer
          example: 40
    location:
      type: object
      properties:
        city:
          type: string
          example: London
        state:
          type: string
          example: California
        country:
          type: string
          example: India
        display_name:
          type: string
        formatted_address:
          type: string
          example: '4, Privet Drive, London'
        latitude:
          type: number
          example: 12.971599
        longitude:
          type: number
          example: 77.594566
    custom_properties:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: boolean
          - type: integer
          - $ref: '#/components/schemas/location'
          - type: array
            items:
              type: string
        description: >
          The value for the custom properties. This could be a String, Boolean,
          Integer or an Array of Strings. <br>
      example:
        house: gryffindor
    dwolla_cutomers_metadata:
      type: object
      properties:
        customerMetadataId:
          type: string
          readOnly: true
        customerId:
          type: string
          readOnly: true
        bankAccountAdded:
          type: boolean
          readOnly: true
          description: |
            Flag which indicates whether bank account was added or not.
          default: false
          example: true
    annual_mileage:
      type: object
      properties:
        twoWheeler:
          type: number
          example: 0
        fourWheeler:
          type: number
          example: 0
        fourWheeler1:
          type: number
          example: 0
        fourWheeler3:
          type: number
          example: 0
        fourWheeler4:
          type: number
          example: 0
        bicycle:
          type: number
          example: 0
        electricCar:
          type: number
          example: 0
    employees:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: >
            This id prodvided by Fyle to identify a employee from this
            organisation.

            This id is always prefixed with `ou`.

            This id is unique per organisation per email.
          readOnly: true
          example: ouHXboARkbAB
        user_id:
          type: string
          maxLength: 255
          description: |
            This id helps to identify employees in other organisations.
            It is always prefixed with the string `us`.
            It is unique per email.
          example: usIYTLwzlaGu
        email:
          type: string
          format: email
          maxLength: 127
          example: john.doe@example.com
          description: >
            An immutable field that represents the email address of the
            employee.

            Must be compliant with <a
            href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
        employee_code:
          type: string
          maxLength: 255
          example: E84122
          description: >
            This field refers to any string that the client programs can use to
            refer to an employee's unique id.

            This could be any field such as an UUID from an Active Directory
            server or employee id in a HRMS system.

            This field shall be ignored in POST requests.
        full_name:
          type: string
          maxLength: 255
          example: John Doe
          description: >-
            Represents the full name of the employee. Must be at least 3
            characters.
        created_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when this employees entry was created.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T13:14:54.804Z'
        updated_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when this employees entry was updated.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-11T13:14:55.201598Z'
        email_verified_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when this email was verified in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        onboarded:
          type: boolean
          description: >
            This flag indicates whether an employee has completed the onboarding
            flow or not.
          example: true
        joining_date:
          type: string
          format: date
          example: '2018-10-31'
          description: Date string in YYYY-MM-DD format
        location:
          type: string
          maxLength: 255
          example: Bangalore Ofc
        level_id:
          type: string
          maxLength: 255
          example: lvlnvJUe9k6Vx
        level:
          $ref: '#/components/schemas/level'
        business_unit:
          type: string
          maxLength: 255
          example: Finance ops
        department_id:
          type: string
          maxLength: 255
          example: dept9in4oIHpdR
        department:
          $ref: '#/components/schemas/department'
        title:
          type: string
          maxLength: 255
          example: Branch Manager
        mobile:
          type: string
          description: >
            Mobile number of the employee.

            `Given example is a fake number. We don't know who might answer your
            call.`
          example: +1-202-555-0167
        mobile_verified:
          type: boolean
          description: ''
          default: false
          example: false
        mobile_verified_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when the employee has verified his/her mobile number in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        roles:
          type: array
          readOnly: true
          description: >
            These are roles assigned to an employee, Most roles are assigned by
            Admin.

            Few roles like HOP, HOD, APPROVER are assigned by FYLE.
          items:
            type: string
            enum:
              - FYLER
              - APPROVER
              - TRAVEL_ADMIN
              - VERIFIER
              - PAYMENT_PROCESSOR
              - FINANCE
              - ADMIN
              - TRAVEL_AGENT
              - OWNER
              - AUDITOR
              - HOD
              - HOP
          example:
            - FYLER
            - APPROVER
        branch_ifsc:
          type: string
          maxLength: 11
          description: >
            IFSC code of the bank account of the employee.

            Must be a 11 digit alphanumeric code. `branch_ifsc` is India
            specific.
          example: SBIN0116569
        bank_name:
          type: string
          readOnly: true
          example: Example bank
        branch_account:
          type: string
          maxLength: 63
          description: >
            The account number of the bank account of the employee.
            `branch_account` is India specific.
          example: XWWEW000024324493
        org_id:
          type: string
          description: |
            The unique id of the Organization to which the employee belongs.
            This field shall be ignored in POST requests.
          example: orwruogwnngg
        org_name:
          type: string
          description: |
            The Name of the Organization to which the employee belongs.
            This field shall be ignored in POST requests.
          example: Ministry of Magic
        primary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: >
            Primary approver who will be added as an approver by default for all
            the submitted reports and expenses.
          example:
            full_name: primary approver
            email: primary_approver@example.com
        primary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the primary approver.
          example: ou4b24ugv3vg
        secondary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            A secondary approver who can be added to reports via policies.
          example:
            full_name: secondary approver
            email: secondary_approver@example.com
        secondary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the secondary approver.
          example: ourjgeugv3vg
        tertiary_approver:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            A tertiary approver who can be added to reports via policies.
          example:
            full_name: tertiary approver
            email: tertiary_approver@example.com
        tertiary_approver_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the tertiary approver.
          example: oueuroefkver
        delegatee:
          allOf:
            - $ref: '#/components/schemas/user'
          description: |
            An employee who will be able to login on-behalf-of this employee.
          example:
            full_name: delegatee
            email: delegatee@example.com
        delegatee_id:
          type: string
          maxLength: 255
          description: |
            Employee Id of the delegatee.
          example: ouvebjeasfj
        delegation_end_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Show when the employee has verified his/her mobile number in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        delegation_start_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Shows when the employee was verified his/her mobile number in Fyle.

            This field shall be ignored in POST calls to create/update
            employees.
          readOnly: true
          example: '2020-06-01T16:19:00.000Z'
        mileage_rate_labels:
          type: array
          description: |
            The list of mileage labels that are applicable for this employee.
          items:
            type: string
            enum:
              - TWO_WHEELER
              - FOUR_WHEELER
              - FOUR_WHEELER1
              - FOUR_WHEELER3
              - FOUR_WHEELER4
              - BICYCLE
              - ELECTRIC_CAR
          example:
            - TWO_WHEELER
            - FOUR_WHEELER
        cost_centers:
          type: array
          description: |
            This list of cost centers that are applicable for this employee.
          items:
            $ref: '#/components/schemas/cost_center'
        per_diem_rates:
          type: array
          description: This list of per diem rates that are applicable for this employee.
          items:
            $ref: '#/components/schemas/perdiem'
        custom_properties:
          $ref: '#/components/schemas/custom_properties'
        disabled:
          type: boolean
          description: >
            Indicates whether an employee is disabled or not in Fyle.

            During POST call, If set to `TRUE`, an active employee account will
            be disabled.

            Setting to `FALSE` will NOT enable a disabled employee.

            This can only be accomplished from the web-app.
          default: false
        special_email:
          type: string
          format: email
          description: >
            This is an auto-generated email to which an employee can forward a
            receipt from any of their email inboxes.

            A corresponding expense will be created in their Fyle app.
          example: receipts+john_doe_ejtj@fyle.ai
        dwolla_customers_metadata:
          $ref: '#/components/schemas/dwolla_cutomers_metadata'
        annual_mileage_of_user_before_joining_fyle:
          $ref: '#/components/schemas/annual_mileage'
        status:
          type: string
          enum:
            - PENDING_DETAILS
            - ACTIVE
            - DISABLED
          example: ACTIVE
        is_primary:
          type: boolean
          description: >
            This flag indicates whether this is primary account of this employee
            or not.
          readOnly: true
          example: true
    get_employees:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v3/employees
        data:
          type: array
          items:
            $ref: '#/components/schemas/employees'
    requests_employees:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/employees'
        test:
          type: boolean
          example: false
          default: false
      required:
        - data
    post_employees:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 127
          description: >
            An immutable field that represents the email address of the
            Employee.

            Must be compliant with <a
            href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
          example: john.doe@example.com
        id:
          type: string
          maxLength: 255
          description: >
            This id prodvided by Fyle to identify a employee from this
            organisation.

            This id is always prefixed with `ou`.

            This id is unique per organisation per email.
          example: ouHXboARkbAB
    bulk_error:
      type: object
      properties:
        row:
          type: integer
          description: |
            This holds the info of which row contains bad data.
        key:
          type: string
          description: |
            This helps in identifying the error by unique key.
        message:
          type: string
          description: |
            This explains what the error is in `human readable` text.
    json_parsing_error:
      type: object
      properties:
        message:
          enum:
            - Unable to process JSON
          type: string
          description: |
            This error means that incoming json is not in right format.
        code:
          type: integer
          default: 400
          example: 400
          deprecated: true
    org_id:
      type: string
      description: |
        The unique id of the Organization to which the object is associated.
      example: orwruogwnngg
    org_name:
      type: string
      description: |
        The Name of the Organization to which the object is associated.
      example: Ministry of Magic
    created_at:
      type: string
      format: date-time
      description: >
        <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was created.
      readOnly: true
      example: '2020-06-01T13:14:54.804Z'
    updated_at:
      type: string
      format: date-time
      description: >
        <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
        section 5.6 compliant timestamp.</a>

        Signifies when this object was updated.
      readOnly: true
      example: '2020-06-11T13:14:55.201598Z'
    cost_centers:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: >
            This is provided by Fyle to identify a cost center from this
            organisation.
          readOnly: true
          example: '1'
        name:
          type: string
          maxLength: 255
          description: |
            This represents the name of the cost center.
          example: sales & marketing
        code:
          type: string
          maxLength: 255
          description: |
            This represents the code of cost center.
          example: sm-cc
        description:
          type: string
          maxLength: 255
          description: |
            This field provides a decription about the cost center.
          example: Initial Cost center
        enabled:
          type: boolean
          description: |
            This field specifies if the current cost center is enabled or not.
          example: true
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    get_cost_centers:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v3/cost_centers
        data:
          type: array
          items:
            $ref: '#/components/schemas/cost_centers'
    requests_cost_centers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/cost_centers'
        test:
          type: boolean
          example: false
          default: false
      required:
        - data
    employee_id:
      type: string
      maxLength: 255
      description: >
        This id prodvided by Fyle to uniquely identify an employee within an
        organization.

        This id is always prefixed with `ou`.
      readOnly: true
      example: outGt9ju6qP
    minimals_employees:
      type: object
      description: Details of the employee to whom this object belongs to.
      properties:
        user_id:
          type: string
          maxLength: 255
          description: |
            This id helps to identify employees in other organisations.
            It is always prefixed with the string `us`.
            It is unique per email.
          example: usIYTLwzlaGu
        employee_code:
          type: string
          maxLength: 255
          example: E84122
          description: >
            This field refers to any string that the client programs can use to
            refer to an employee's unique id.

            This could be any field such as an UUID from an Active Directory
            server or employee id in a HRMS system.
        location:
          type: string
          maxLength: 255
          example: Bangalore Ofc
        level_id:
          type: string
          maxLength: 255
          example: lvlnvJUe9k6Vx
        department_id:
          type: string
          maxLength: 255
          example: dept9in4oIHpdR
        business_unit:
          type: string
          maxLength: 255
          example: Finance ops
          description: >-
            Represents the business unit of the organization to which of the
            employee belongs.
        title:
          type: string
          maxLength: 255
          example: Branch Manager
          description: Represents the title/desgination of the employee.
        mobile:
          type: string
          description: >
            Mobile number of the employee.

            `Given example is a fake number. We don't know who might answer your
            call.`
          example: +1-202-555-0167
        joining_dt:
          type: string
          format: date
          example: '2018-10-31'
          description: Date string in YYYY-MM-DD format
        full_name:
          type: string
          maxLength: 255
          example: John Doe
          description: >-
            Represents the full name of the employee. Must be at least 3
            characters.
    currency:
      type: string
      description: >
        The three-letter currency code following ISO standard <a
        href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>
      example: USD
    amount:
      type: integer
      description: |
        Amount value of the object.
      example: 100
    settlement_id:
      type: string
      maxLength: 255
      description: |
        Unique identifier of settlement object linked to this object.
      example: setd8Ywn4n0H
    export_info:
      type: object
      description: Accounting export information for this object.
      properties:
        exported:
          type: boolean
          description: >
            Signifies whether this object has been exported to external
            accounting system or not.
          example: true
        exported_at:
          type: string
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies when this object was exported to external accounting
            system or not.
          example: '2020-06-01T13:14:54.804Z'
        exported_ids:
          type: array
          description: |
            Array of export IDs 
          example:
            - tpe7sY2bHfl8
            - tpe7fs7wvLU9
    reimbursements:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a reimbursement.
            This id is always prefixed with `reim`.
          readOnly: true
          example: reimntGt9ju6qP
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        state:
          type: string
          enum:
            - COMPLETE
            - PENDING
          description: |
            State of the reimbursement.
          example: COMPLETE
        unique_id:
          type: string
          description: >
            A unique, organization wide identifier for a particular
            reimbursement.<br>

            This id is always prefixed with `P/`.
          example: P/2020/11/29
        accounting_exported:
          type: boolean
          description: >
            Boolean value which signifies whether the particular reimbursement
            has been exported using any accounting integration (like QBO).
          example: true
        settlement_id:
          $ref: '#/components/schemas/settlement_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        creator_id:
          type: string
          maxLength: 255
          description: >
            Employee id of creator if this reimbursement which uniquely identify
            an the creator within an organization.

            This id is always prefixed with `ou`.
          readOnly: true
          example: outGt9ju6qP
        creator:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who created this reimbursement.
        mode:
          type: string
          enum:
            - ACH
            - OFFLINE
          description: |
            Mode of creation of this reimbursement.
          example: OFFLINE
        ach_state:
          type: string
          enum:
            - ACH_INITIATED
            - ACH_COMPLETE
            - ACH_FAILED
            - ACH_RETRY
          description: |
            Status of ACH if this reimbursment is processed via ACH.
          example: ACH_COMPLETE
        export_info:
          $ref: '#/components/schemas/export_info'
    get_reimbursements:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v3/reimbursements
        data:
          type: array
          items:
            $ref: '#/components/schemas/reimbursements'
    foreign_currency:
      type: string
      description: >
        The three-letter currency code following ISO standard <a
        href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.

        Original currency signifies the currency in which the object
        (expense/advance/refund/etc.) was originally created.
      example: USD
    foreign_amount:
      type: integer
      description: >
        Amount value of the object, in original currency i.e the currency in
        which the object was initially created.
      example: 100
    payment_id:
      type: string
      maxLength: 255
      description: |
        Unique identifier of payments object linked to this object.
      example: payaSOemadma7
    refunds:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a refund.
            This id is always prefixed with `ref`.
          readOnly: true
          example: refDml2wrWqk1
        collector_id:
          type: string
          maxLength: 255
          description: >
            Employee ID of collector of the refund.

            This ID prodvided by Fyle to uniquely identify an employee within an
            organization.

            This ID is always prefixed with `ou`.
          example: outGt9ju6qP
        collector:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who is the collector of this refund.
        returnee_id:
          type: string
          maxLength: 255
          description: >
            Employee ID of returnee of the refund.

            This ID prodvided by Fyle to uniquely identify an employee within an
            organization.

            This ID is always prefixed with `ou`.
          example: oul8zTHMnTjp
        returnee:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who is the returnee of this refund.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        payment_mode:
          type: string
          enum:
            - CASH
            - BANK_TRANSFER
            - FOREX
            - CHEQUE_DD
          maxLength: 255
          description: |
            Mode of payment for a refund object.
          example: BANK_TRANSFER
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        reference:
          type: string
          description: |
            Reference code of a refund object.
          example: 6t2uygfhjdhs
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        note:
          type: string
          description: |
            Optional descriptive note which can be added to a refund.
          example: august's pending amount refund
        settlement_id:
          $ref: '#/components/schemas/settlement_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        returned_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies when this refund was returned by returnee.
          example: '2020-06-01T13:14:54.804Z'
        card_number:
          type: string
          description: |
            Last 4 or 6 digits of the card used for payment of this refund.
          example: '2838'
        payment_id:
          $ref: '#/components/schemas/payment_id'
        source:
          type: string
          enum:
            - WEBAPP
            - WEBAPP_BULK_EXCEL
          description: >
            Enum value signifying the client method from which this refund was
            initiated.
          example: WEBAPP_BULK_EXCEL
        export_info:
          $ref: '#/components/schemas/export_info'
    get_refunds:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v3/refunds
        data:
          type: array
          items:
            $ref: '#/components/schemas/refunds'
    settlements:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a settlement.
            This id is always prefixed with `set`.
          readOnly: true
          example: setmntGt9ju6qP
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        opening_dt:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies the opening date of this settlement.
          example: '2020-06-01T13:14:54.804Z'
        closing_dt:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies the closing date of this settlement.
          example: '2020-06-01T13:14:54.804Z'
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        reimbursement_id:
          type: string
          maxLength: 255
          description: |
            Unique identifier of reimbursement object linked to this settlement.
          example: reimd8Ywn4n0H
        creator_id:
          type: string
          maxLength: 255
          description: >
            Employee id of creator of the reimbursement linked to this
            settlement, which uniquely identify an employee within an
            organization.

            This id is always prefixed with `ou`.
          readOnly: true
          example: outGt9ju6qP
        creator:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: >
            Details of employee who created the reimbursement linked to this
            settlement.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        export_info:
          $ref: '#/components/schemas/export_info'
        settlement_number:
          type: integer
          description: >
            A number to identify an employee's settlement. It is unique for all
            settlements of an employee.
          example: 39
        total_opening_balance:
          type: integer
          description: |
            Value of opening amount of this settlement.
          example: 1500
        total_closing_balance:
          type: integer
          description: |
            Value of closing amount of this settlement.
          example: 2500
        currency:
          $ref: '#/components/schemas/currency'
    get_settlements:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v3/settlements
        data:
          type: array
          items:
            $ref: '#/components/schemas/settlements'
    orgs:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/org_id'
        name:
          $ref: '#/components/schemas/org_name'
        domain:
          type: string
          maxLength: 255
          description: >
            This field specifies the domain with which the organisation is
            registered.
          example: gmail.com
        currency:
          type: string
          maxLength: 255
          description: |
            This field specifies the default currency to be used in expenses.
          example: INR
        branch_ifsc:
          type: string
          maxLength: 255
          description: >
            This is the IFSC code of the bank branch with which the organisation
            is associated.
          example: HDFC0122333
        branch_account:
          type: string
          maxLength: 255
          description: >
            This field specifies the bank branch with which the organisation is
            associated.
          example: ICIC0300103
        verified:
          type: boolean
          description: |
            This field specifies if the organisation is verified or not.
          example: true
        country_code:
          type: string
          maxLength: 255
          description: >
            This field specifies the country code where the organisation is
            registered.
          example: VI
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    get_orgs:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v3/orgs
        data:
          type: array
          items:
            $ref: '#/components/schemas/orgs'
    balance_transfers:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id prodvided by Fyle to uniquely identify a balance transfer.
            This id is always prefixed with `bt`.
          readOnly: true
          example: btLL7YJKZHMz
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/minimals_employees'
        issuer_id:
          type: string
          maxLength: 255
          description: >
            Employee ID of issuer of the balance transfer.

            This ID prodvided by Fyle to uniquely identify an employee within an
            organization.

            This ID is always prefixed with `ou`.
          example: oul8zTHMnTjp
        issuer:
          allOf:
            - $ref: '#/components/schemas/minimals_employees'
          description: |
            Details of employee who issued this balance transfer.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        note:
          type: string
          description: |
            Optional descriptive note which can be added to a refund.
          example: august's pending amount refund
        issued_at:
          type: string
          format: date-time
          description: >
            <a href='https://tools.ietf.org/html/rfc3339#section-5.6'>RFC 3339,
            section 5.6 compliant timestamp.</a>

            Signifies when this balance transfer was issued by issuer.
          example: '2020-06-01T13:14:54.804Z'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        source_account:
          type: string
          description: >
            Signifies name of account with which this balance transfer is
            associated.

            Few sample values : Advance Account, Corporate Credit Card Account,
            Organization Category Account
          example: Personal Account
        export_info:
          $ref: '#/components/schemas/export_info'
    get_balance_transfers:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/offset'
        limit:
          $ref: '#/components/schemas/limit'
        url:
          type: string
          example: /v3/balance_transfers
        data:
          type: array
          items:
            $ref: '#/components/schemas/balance_transfers'
tags:
  - name: Employees
    description: |
      These APIs gives you access to manage your Employees data.
  - name: Reimbursements
    description: |
      These APIs gives you access to fetch your Reimbursements data.
  - name: Cost Centers
    description: |
      These APIs gives you access to manage your Cost Centers data.
  - name: Refunds
    description: |
      These APIs gives you access to manage your Refunds data.
  - name: Settlements
    description: |
      These APIs gives you access to manage your Settlements data.
  - name: Balance Transfers
    description: |
      These APIs gives you access to manage your balance transfers data.
  - name: Orgs
    description: |
      This API gives you access to your current org data.
paths:
  /v4/admin/employees:
    get:
      tags:
        - Employees
      summary: |
        Returns a list of employees.
      operationId: GetEmployees
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/org_id'
        - in: query
          name: id
          schema:
            type: string
          description: |
            Filters the objects by id. For single value use `id=eq.<value>`.
            For mulitple values, use `id=in.(value1,value2,value3)`. <br>
            Supported operators: `in`, `eq`, `not.in`, `not.eq`
          example: eq.ouvjegwriw
        - in: query
          name: email
          description: |
            This param is used to filter records based on employee email.
            Supported operators are `in`,`eq`.<br>
          schema:
            type: string
            format: email
          example: eq.employee1@example.com
        - in: query
          name: order
          description: |
            use comma separated column names for sorting the results.
            For sorting in descending order, use `column_name.desc`
          schema:
            type: string
          example: 'created_at.desc,id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_employees'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Employees
      summary: |
        upsert employees
      description: >
        creates or update employees in bulk. This API is written in such way to
        support bulk operations only.
      operationId: PosEmployees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests_employees'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/post_employees'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: john.doe@example.com
                        message: Invalid or disabled approver 1 email
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/cost_centers:
    get:
      tags:
        - Cost Centers
      summary: Returns a list of cost Centers
      operationId: GetCostCenters
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/org_id'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/code'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_cost_centers'
        '401':
          description: Unauthoried request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Cost Centers
      summary: upsert cost Centers
      description: >
        creates or updates cost centers in bulk. This API is written in such a
        way to support bulk operations only.
      operationId: PostCostCenters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests_cost_centers'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/cost_center'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/bulk_error'
                    example:
                      - row: 1
                        key: Cost center abcd
                        message: Invalid or duplicate cost center code
                  - $ref: '#/components/schemas/json_parsing_error'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/reimbursements:
    get:
      tags:
        - Reimbursements
      summary: Returns a list of reimbursement objects.
      operationId: GetReimbursements
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/employee_id'
        - $ref: '#/components/parameters/employee_user_id'
        - $ref: '#/components/parameters/employee_code'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/settlement_id'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
        - $ref: '#/components/parameters/payment_id'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/purpose'
        - $ref: '#/components/parameters/unique_id'
        - $ref: '#/components/parameters/accounting_exported'
        - $ref: '#/components/parameters/mode'
        - $ref: '#/components/parameters/ach_state'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_reimbursements'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/refunds:
    get:
      tags:
        - Refunds
      summary: Returns a list of Refund objects.
      operationId: GetRefunds
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/foreign_currency'
        - $ref: '#/components/parameters/foreign_amount'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
        - $ref: '#/components/parameters/payment_id'
        - $ref: '#/components/parameters/payment_mode'
        - $ref: '#/components/parameters/collector_id'
        - $ref: '#/components/parameters/returnee_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_refunds'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/settlements:
    get:
      tags:
        - Settlements
      summary: Returns a list of settlement objects.
      operationId: GetSettlements
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/employee_id'
        - $ref: '#/components/parameters/employee_user_id'
        - $ref: '#/components/parameters/employee_code'
        - $ref: '#/components/parameters/opening_dt'
        - $ref: '#/components/parameters/closing_dt'
        - $ref: '#/components/parameters/total_opening_balance'
        - $ref: '#/components/parameters/total_closing_balance'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_settlements'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /v4/admin/orgs:
    get:
      tags:
        - Orgs
      summary: >-
        Returns a list with a single element, i.e., organisation of the current
        user.
      operationId: GetOrgs
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_orgs'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /v4/admin/balance_transfers:
    get:
      tags:
        - Balance Transfers
      summary: Returns a list of Balance Transfer objects.
      operationId: GetBalanceTransfers
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/currency'
        - $ref: '#/components/parameters/amount'
        - $ref: '#/components/parameters/exported'
        - $ref: '#/components/parameters/exported_at'
        - $ref: '#/components/parameters/export_ids'
        - $ref: '#/components/parameters/issued_at'
        - $ref: '#/components/parameters/issuer_id'
        - $ref: '#/components/parameters/source_account'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_balance_transfers'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
